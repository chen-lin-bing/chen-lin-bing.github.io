<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>树莓派搭建NAS</title>
      <link href="/2020/02/19/shu-mei-pai-da-jian-nas/"/>
      <url>/2020/02/19/shu-mei-pai-da-jian-nas/</url>
      
        <content type="html"><![CDATA[<h1 id="树莓派搭建NAS"><a href="#树莓派搭建NAS" class="headerlink" title="树莓派搭建NAS"></a>树莓派搭建NAS</h1><p>​        疫情期间在家无聊，整理东西的时候发现了一直吃灰的树莓派，就想倒腾一下，搭建一个NAS。主要步骤是将一块移动硬盘挂载在树莓派上，做为文件、电影的存储空间，使用samba共享文件，可以在同个局域网的多个终端上访问到，如客厅的天猫魔盒，书房的电脑，自己的手机等。如果有公网ip的小伙伴，后期也可以通过frp将aria2的web页面映射到公网上，这要随时随地就看以下载想要的电影，回家后可以直接看下载好的电影。目前aria2支持下载各种https，ftp，BitTorrent等类型的资源。</p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="http://image.bingobingo.xin/2020-02-18-125921.png" alt=""></p><p><img src="http://image.bingobingo.xin/2020-02-18-130049.png" alt=""></p><p><img src="http://image.bingobingo.xin/2020-02-18-125645.png" alt=""></p><p><img src="http://image.bingobingo.xin/2020-02-18-130815.png" alt=""></p><h2 id="前提准备"><a href="#前提准备" class="headerlink" title="前提准备"></a>前提准备</h2><ul><li>树莓派3b+</li><li>2T移动硬盘一个（用于存放电影和文件）</li><li>天猫魔盒（可以用别的电视盒子，没有电视盒子也不影响）</li><li>公网ip的服务器一台用于frp内网穿透（可选）</li></ul><h2 id="需要用到的软件"><a href="#需要用到的软件" class="headerlink" title="需要用到的软件"></a>需要用到的软件</h2><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>Samba</td><td>Samba是在Linux和UNIX系统上实现<a href="https://baike.baidu.com/item/SMB协议" target="_blank" rel="noopener">SMB协议</a>的一个免费软件，该通信协议为局域网内的不同计算机之间提供文件及打印机等资源的共享服务</td></tr><tr><td>h5ai</td><td>基于HTTP Web 服务器的现代文件索引器</td></tr><tr><td>aria2</td><td>迅雷之前在Linux上一直使用的是固件Xware，但在好像已经不再支持，可以改用开源的aria2做为下载器</td></tr><tr><td>nginx</td><td>高性能的HTTP和反向代理服务器</td></tr><tr><td>PiDashboard</td><td>树莓派设备监控工具</td></tr><tr><td>AriaNg</td><td>AriaNg 是一个让 aria2 更容易使用的现代 Web 前端</td></tr></tbody></table><h2 id="树莓派固定IP"><a href="#树莓派固定IP" class="headerlink" title="树莓派固定IP"></a>树莓派固定IP</h2><p>局域网访问最好使使用固定的IP，防止树莓派重启，路由器DHCP分配到新的IP地址，这样ssh登陆和访问树莓派上的网页都比较麻烦。</p><pre class=" language-shell"><code class="language-shell">vim /etc/dhcpcd.conf</code></pre><p>在最后加入</p><pre class=" language-shell"><code class="language-shell">interface eth0  #指定接口 如果是wifi连接接口是wlan0  static ip_address=192.168.1.100/24 #指定静态IP，/24表示子网掩码为 255.255.255.0static routers=192.168.1.1 #网关IP地址static domain_name_servers=192.168.1.1 8.8.8.8 #dns服务器地址</code></pre><h2 id="树莓派配置国内镜像"><a href="#树莓派配置国内镜像" class="headerlink" title="树莓派配置国内镜像"></a>树莓派配置国内镜像</h2><p>将树莓派的镜像源改为国内的，已经是国内跳过这一步</p><p>选择自己树莓派的相应版本</p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/raspbian/" target="_blank" rel="noopener">清华大学官方镜像地址</a></p><p>我这里使用的是Debian10(buster)</p><pre class=" language-shell"><code class="language-shell"># 编辑 `/etc/apt/sources.list` 文件，删除原文件所有内容，用以下内容取代：deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main non-free contribdeb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main non-free contrib# 编辑 `/etc/apt/sources.list.d/raspi.list` 文件，删除原文件所有内容，用以下内容取代：deb http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ buster main ui</code></pre><h2 id="树莓派搭建NAS-1"><a href="#树莓派搭建NAS-1" class="headerlink" title="树莓派搭建NAS"></a>树莓派搭建NAS</h2><p>主要是通过Samba实现</p><pre class=" language-shell"><code class="language-shell">sudo apt-get updatesudo apt-get install samba samba-common-bin #安装samba</code></pre><pre class=" language-shell"><code class="language-shell">mkdir /home/pi/share #创建挂载的目录sudo chmod 777 /home/pi/share #赋予权限</code></pre><p>配置conf文件</p><pre class=" language-shell"><code class="language-shell">sudo vim /etc/samba/smb.conf#在最后添加配置内容[share]   path = /home/pi/share   valid users = pi   browseable = yes   public = yes   writable = yes   guest ok = yes   read only = no=========================================================================================#同时可以可以注释调掉以下home配置，防止默认显示home目录下的文件#[homes] #  comment = Home Directories #  browseable = no# By default, the home directories are exported read-only. Change the# next parameter to 'no' if you want to be able to write to them. #  read only = yes# File creation mask is set to 0700 for security reasons. If you want to# create files with group=rw permissions, set next parameter to 0775. #  create mask = 0700# Directory creation mask is set to 0700 for security reasons. If you want to# create dirs. with group=rw permissions, set next parameter to 0775. #  directory mask = 0700# By default, \\server\username shares can be connected to by anyone# with access to the samba server.# The following parameter makes sure that only "username" can connect# to \\server\username# This might need tweaking when using external authentication schemes #  valid users = %S# Un-comment the following and create the netlogon directory for Domain Logons# (you need to configure Samba to act as a domain controller too.)</code></pre><pre class=" language-shell"><code class="language-shell">systemctl restart smbd #重启samba</code></pre><pre class=" language-shell"><code class="language-shell">sudo smbpasswd -a pi #设置共享用户以及密码</code></pre><p>挂载移动硬盘到指定目录下</p><pre class=" language-shell"><code class="language-shell">sudo fdisk -l #插上移动硬盘查看状态</code></pre><p><img src="http://image.bingobingo.xin/2020-02-18-131906.png" alt=""></p><p>如果移动硬盘格式是ntfs的，可以安装了一个NTFS格式可读写软件</p><pre class=" language-shell"><code class="language-shell">sudo aptitude install ntfs-3g</code></pre><p>这只是临时挂载，开机挂载需要修改fstab</p><pre class=" language-shell"><code class="language-shell"> sudo mount /dev/sda1  /home/pi/share  #临时挂载 df -h #查看是否挂载成功</code></pre><p>具体各个参数可按照自己需求更改配置</p><pre class=" language-shell"><code class="language-shell"> sudo vim /etc/fstab  #最后一行加入 /dev/sda1            /home/pi/share   ntfs    defaults          0       0</code></pre><p>重启树莓派查看是否开机自动挂载</p><p>同个局域网mac电脑访问共享文件</p><p>打开访达输入快捷键Command+K，即可访问</p><p><img src="http://image.bingobingo.xin/2020-02-18-132143.png" alt=""> </p><p>同个局域网win10访问共享文件</p><p>win10需要先打开smb服务</p><h2 id="树莓派下载配置nginx和php"><a href="#树莓派下载配置nginx和php" class="headerlink" title="树莓派下载配置nginx和php"></a>树莓派下载配置nginx和php</h2><pre class=" language-shell"><code class="language-shell">sudo apt-get install nginxsystemctl enable nginx #开机自启动sudo apt-get install nginx php7.3-fpm php7.3-cli php7.3-curl php7.3-gd php7.3-mcrypt php7.3-cgivim /etc/nginx/sites-available/default #更改配置，使其能够处理php</code></pre><p>将其中以下内容注释</p><pre class=" language-shell"><code class="language-shell">location / {                # First attempt to serve request as file, then                # as directory, then fall back to displaying a 404.                try_files $uri $uri/ =404;        }</code></pre><p>加入以下内容</p><pre class=" language-shell"><code class="language-shell">location / {index  index.html index.htm index.php default.html default.htm default.php;}location ~\.php$ {fastcgi_pass unix:/run/php/php7.3-fpm.sock;#fastcgi_pass 127.0.0.1:9000;fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;include fastcgi_params;}</code></pre><pre class=" language-shell"><code class="language-shell">systemctl nginx restart #重启nginx </code></pre><pre class=" language-shell"><code class="language-shell">#测试php是否正常可用cd /var/www/html #注意查看自己的nginx配置的root路径是不是指向该目录touch index.phpvim index.php</code></pre><p>键入如下代码</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>访问<code>http://树莓派IP</code></p><p>出现如下页面代表配置成功</p><p><img src="http://image.bingobingo.xin/2020-02-19-033833.png" alt=""></p><p>##树莓派下安装Pi-Dashboard工具(选装)</p><pre class=" language-shell"><code class="language-shell">cd /var/www/htmlsudo git clone https://github.com/spoonysonny/pi-dashboard.gitsudo chown -R www-data pi-dashboard</code></pre><p>即可通过 <code>http://树莓派IP/pi-dashboard</code> 访问部署好了的 Pi Dashboard。</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="树莓派下载配置aria2"><a href="#树莓派下载配置aria2" class="headerlink" title="树莓派下载配置aria2"></a>树莓派下载配置aria2</h2><pre class=" language-shell"><code class="language-shell">sudo apt-get install aria2</code></pre><pre class=" language-shell"><code class="language-shell">mkdir /etc/aria2/ #创建文件夹vim /etc/aria2/aria2.config #添加一个aria配置文件mkdir /home/pi/aria2/ #新建文件夹touch aria2.session #用来存放下载会话</code></pre><pre class=" language-shell"><code class="language-shell">daemon=true#用户名#rpc-user=user#密码#rpc-passwd=passwd#设置加密的密钥#rpc-secret=secret#允许rpcenable-rpc=true#允许所有来源, web界面跨域权限需要rpc-allow-origin-all=true#是否启用https加密，启用之后要设置公钥,私钥的文件路径#rpc-secure=true#启用加密设置公钥#rpc-certificate=/home/pi/.config/aria2/example.crt#启用加密设置私钥#rpc-private-key=/home/pi/.config/aria2/example.key#允许外部访问，false的话只监听本地端口rpc-listen-all=true#RPC端口, 仅当默认端口被占用时修改#rpc-listen-port=6800#最大同时下载数(任务数), 路由建议值: 3max-concurrent-downloads=5#断点续传continue=true#同服务器连接数max-connection-per-server=5#最小文件分片大小, 下载线程数上限取决于能分出多少片, 对于小文件重要min-split-size=10M#单文件最大线程数, 路由建议值: 5split=10#下载速度限制max-overall-download-limit=0#单文件速度限制max-download-limit=0#上传速度限制max-overall-upload-limit=0#单文件速度限制max-upload-limit=0#断开速度过慢的连接#lowest-speed-limit=0#验证用，需要1.16.1之后的release版本#referer=*#文件保存路径, 默认为当前启动位置(我的是外置设备，请自行坐相应修改)dir=/home/pi/share/download#文件缓存, 使用内置的文件缓存, 如果你不相信Linux内核文件缓存和磁盘内置缓存时使用, 需要1.16及以上版本#disk-cache=0#另一种Linux文件缓存方式, 使用前确保您使用的内核支持此选项, 需要1.15及以上版本(?)#enable-mmap=true#文件预分配, 能有效降低文件碎片, 提高磁盘性能. 缺点是预分配时间较长#所需时间 none < falloc ? trunc << prealloc, falloc和trunc需要文件系统和内核支持file-allocation=prealloc#不进行证书校验check-certificate=false#保存下载会话save-session=/home/pi/aria2/aria2.sessioninput-file=/home/pi/aria2/aria2.session#断电续传save-session-interval=60#做种问题bt-detach-seed-only=true# 不保存种子文件follow-metalink=membt-save-metadata=falseforce-save=false#日志文件地址#log=/var/log/aria/aria.logbt-tracker= udp://62.138.0.158:6969/announce,udp://188.241.58.209:6969/announce,udp://93.158.213.92:1337/announce,udp://62.210.97.59:1337/announce,udp://151.80.120.112:2710/announce,udp://80.209.252.132:1337/announce,udp://208.83.20.20:6969/announce,udp://5.206.3.65:6969/announce,udp://37.235.174.46:2710/announce,udp://185.181.60.67:80/announce,udp://78.142.18.55:1337/announce,udp://78.142.18.61:6969/announce,udp://89.234.156.205:451/announce,udp://159.100.245.181:6969/announce,udp://176.113.71.19:6961/announce,udp://45.134.17.109:6969/announce,udp://51.15.40.114:80/announce,udp://184.105.151.164:6969/announce,udp://212.47.227.58:6969/announce,udp://95.211.168.204:2710/announce  #添加trackers以提高下载速度，可以参考https://github.com/ngosang/trackerslist 上的list，加入自己的配置文件中</code></pre><p>aria2加入服务管理，设置开机自启动</p><pre class=" language-shell"><code class="language-shell">sudo vim /lib/systemd/system/aria.service </code></pre><p>输入以下内容</p><pre class=" language-shell"><code class="language-shell">[Unit]Description=Aria2 ServiceAfter=network.target[Service]User=piType=forkingExecStart=/usr/bin/aria2c --conf-path=/etc/aria2/aria2.config[Install]WantedBy=multi-user.target</code></pre><pre class=" language-shell"><code class="language-shell">systemctl start aria #启动ariasystemctl enable aria #设置开机自启动</code></pre><h2 id="aria2的web管理界面（AriaNg）"><a href="#aria2的web管理界面（AriaNg）" class="headerlink" title="aria2的web管理界面（AriaNg）"></a>aria2的web管理界面（AriaNg）</h2><p><a href="https://github.com/mayswind/AriaNg/releases" target="_blank" rel="noopener">github的地址</a></p><pre class=" language-shell"><code class="language-shell">wget https://github.com/mayswind/AriaNg/releases/download/1.1.4/AriaNg-1.1.4.zip -O aira-ng.zip unzip aira-ng.zip -d aira-ng #解压缩sudo mv aira-ng /var/www/html/aria</code></pre><p>即可通过 <code>http://树莓派IP/aria</code> 访问部署好了aira2的web页面</p><p>配置中有如果设置rpc密钥，填入token栏目</p><p><img src="http://image.bingobingo.xin/2020-02-19-065606.png" alt=""></p><p>##h5ai，nginx的配置</p><p>官网地址 <code>https://larsjung.de/h5ai/</code></p><pre class=" language-shell"><code class="language-shell">wget https://release.larsjung.de/h5ai/h5ai-0.29.2.zip -O h5ai.zipunzip h5ai.zipmv _h5ai /var/www/html/h5aimv _h5ai /home/pi/share #这样可通过h5ai直接访问挂载的移动硬盘，后面的nginx的配置中，需要新开一个web端口来访问</code></pre><p>访问<code>http://树莓派IP/_h5ai/public/index.php</code>查看已开启的功能</p><p><img src="http://image.bingobingo.xin/2020-02-19-053155.png" alt=""></p><p>红框地方因为树莓派32位的问题无法通过软件更改，其他部分根据需求安装配置。开启功能需要的软件都有提示，这里不再赘述。例如需要看电影，需要开启Movie thumbs。</p><p>nginx配置h5ai</p><pre class=" language-shell"><code class="language-shell">vim /etc/nginx/sites-enabled/default</code></pre><pre class=" language-shell"><code class="language-shell">server {    listen 80 default_server;    listen [::]:80 default_server;    # SSL configuration    #    # listen 443 ssl default_server;    # listen [::]:443 ssl default_server;    #    # Note: You should disable gzip for SSL traffic.    # See: https://bugs.debian.org/773332    #    # Read up on ssl_ciphers to ensure a secure configuration.    # See: https://bugs.debian.org/765782    #    # Self signed certs generated by the ssl-cert package    # Don't use them in a production server!    #    # include snippets/snakeoil.conf;    root /var/www/html;    # Add index.php to the list if you are using PHP    index index.html index.htm index.nginx-debian.html /h5ai/public/index.php;    server_name _;    location / {        # First attempt to serve request as file, then        # as directory, then fall back to displaying a 404.        # try_files $uri $uri/ =404;    index  index.html index.htm index.php default.html default.htm default.php /h5ai/public/index.php;    }    location ~\.php$ {    fastcgi_pass unix:/run/php/php7.3-fpm.sock;    #fastcgi_pass 127.0.0.1:9000;    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;    include fastcgi_params;    }}#web页面直接访问挂载盘移动硬盘server {    listen 8080;    listen [::]:8080;    server_name example.com;    root /home/pi/share;    index index.html /h5ai/public/index.php;    location / {    index  index.html index.htm index.php default.html default.htm default.php /h5ai/public/index.php;    }    location ~\.php$ {    fastcgi_pass unix:/run/php/php7.3-fpm.sock;    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;    include fastcgi_params;    }}</code></pre><p>h5ai增加访问密码</p><p>h5ai本身不提供该功能，可以修改部分代码实现。如果使用frp映射该页面，建议开启。</p><pre class=" language-php"><code class="language-php">vim <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>www<span class="token operator">/</span>html<span class="token operator">/</span>h5ai<span class="token operator">/</span><span class="token keyword">public</span><span class="token operator">/</span>index<span class="token punctuation">.</span>php</code></pre><p>在最后加入以下代码</p><pre class=" language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">auth</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$valid_passwords</span> <span class="token operator">=</span> <span class="token keyword">array</span> <span class="token punctuation">(</span><span class="token string">"输入你喜欢的账户"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"输入你喜欢的密码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$valid_users</span> <span class="token operator">=</span> <span class="token function">array_keys</span><span class="token punctuation">(</span><span class="token variable">$valid_passwords</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'PHP_AUTH_USER'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$pass</span> <span class="token operator">=</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'PHP_AUTH_PW'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$validated</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token variable">$valid_users</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token variable">$pass</span> <span class="token operator">==</span> <span class="token variable">$valid_passwords</span><span class="token punctuation">[</span><span class="token variable">$user</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$validated</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'WWW-Authenticate: Basic realm="My Realm"'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'HTTP/1.0 401 Unauthorized'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Not authorized"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在第一行加入</p><pre class=" language-php"><code class="language-php"><span class="token function">auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="frp内网穿透（选择安装）"><a href="#frp内网穿透（选择安装）" class="headerlink" title="frp内网穿透（选择安装）"></a>frp内网穿透（选择安装）</h2><p>Aria2Ng的web页面映射出来，不单单只是在内网访问，这样可以用过aria2随时随地下载资源</p><p>frp的搭建可以参考另外一篇文章：<a href="http://127.0.0.1:4000/2020/02/14/frp-nei-wang-chuan-tou/" target="_blank" rel="noopener">链接地址</a></p><p>搞定，效果理想，各个终端下观看电影，快进后退都没有出现卡顿的现象</p><p>本文aria2部分内容参考来CSDN博主「宁静致远kioye」 <a href="https://blog.csdn.net/kxwinxp/article/details/80288006" target="_blank" rel="noopener">链接地址</a></p>]]></content>
      
      
      <categories>
          
          <category> NAS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NAS </tag>
            
            <tag> Samba </tag>
            
            <tag> aria2 </tag>
            
            <tag> 树莓派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>frp内网穿透</title>
      <link href="/2020/02/14/frp-nei-wang-chuan-tou/"/>
      <url>/2020/02/14/frp-nei-wang-chuan-tou/</url>
      
        <content type="html"><![CDATA[<h1 id="FRP内网穿透"><a href="#FRP内网穿透" class="headerlink" title="FRP内网穿透"></a>FRP内网穿透</h1><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>把搭建在家里树莓派内的网站映射到公网上，可以随时随地的访问网站。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>拥有公网IP的服务器</li><li>树莓派</li></ul><p>##下载配置服务端frps</p><p>frp在git上的下载地址 <a href="https://github.com/fatedier/frp/releases" target="_blank" rel="noopener">https://github.com/fatedier/frp/releases</a></p><p>根据操作系统和架构下载对应版本的frp，例如在服务端用的是amd64的Liunx，而树莓派是arm的Linux</p><pre class=" language-shell"><code class="language-shell">uanme -a #查看系统信息wget https://github.com/fatedier/frp/releases/download/v0.31.2/frp_0.31.2_linux_amd64.tar.gz #服务端下载压缩包tar -zxvf frp_0.31.2_linux_amd64.tar.gz #解压缩</code></pre><p>在服务端需要配置frps.ini文件，具体可以参考git文档，以下给出的是我的简单的配置</p><pre class=" language-shell"><code class="language-shell">[common]token =  #客户端连接令牌,自己填写，需要和客户端的保持一致bind_port = 7000 dashboard_port = 7500 #控制台的端口dashboard_user =  #控制台的登陆账户，自己填写dashboard_pwd =  #控制台的密码，自己填写tcp_mux = truemax_pool_count = 20 # 穿透服务允许的连接数max_ports_per_client = 0 # 单个客户端允许建立的穿透服务，0为不限制</code></pre><pre class=" language-shell"><code class="language-shell">./frpc -c ./frc.ini #配置完成后，在当前的工作目录下执行启动服务</code></pre><p>访问控制台<code>http://[server_addr]:7500</code></p><p><img src="https://tva1.sinaimg.cn/large/0082zybply1gc1s73wccaj31pw0u0whs.jpg" alt=""></p><p>将frps加入服务管理 ，在/usr/lib/systemd/system/目录下新建frps.service文件</p><pre class=" language-shell"><code class="language-shell">[Unit]Description=frps serviceAfter=network.target syslog.targetWants=network.target[Service]Type=simple#启动服务的命令（此处写你的frps的实际安装目录ExecStart=/usr/local/frp/frps -c /usr/local/frp/frps.ini[Install]WantedBy=multi-user.target</code></pre><p>将frp服务设置为开机自启动</p><pre class=" language-shell"><code class="language-shell">systemctl enable frps #开机自启动systemctl start frps #启动frp</code></pre><h2 id="下载配置客户端frpc"><a href="#下载配置客户端frpc" class="headerlink" title="下载配置客户端frpc"></a>下载配置客户端frpc</h2><p>获取对应架构的frp客户端，我这里用的是树莓派所采用的是arm版的</p><pre class=" language-shell"><code class="language-shell">wget https://github.com/fatedier/frp/releases/download/v0.31.2/frp_0.31.2_linux_arm.tar.gztar -zxvf frp_0.31.2_linux_arm.tar.gz #解压缩</code></pre><p>在客户端需要配置frps.ini文件，我这里只需要将一个网站公开，可以按照自己的需求进行配置</p><pre class=" language-shell"><code class="language-shell">[common]server_addr =  #服务器地址,可以是域名，也可使ip地址server_port = 7000token = #需要以服务端保持一致[ssh]type = tcplocal_ip = 127.0.0.1local_port = 22 #本地端口remote_port = 8008 #远程ssh端口[pi]type = tcplocal_ip = 127.0.0.1local_port = 80 #本地端口remote_port = 8080 #远程网页访问端口</code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><pre class=" language-shell"><code class="language-shell">ssh -p服务端远程端口 客户端的Lunix登入账户@服务器地址#之后的密码输入客户端的登陆密码#IP地址:8080 直接访问树莓派上的网址#如果需要其他端口，自行选择映射，如AriaNg的rpc 6800端口也可以通过映射，使AriaNg能够连接上内网的aria2服务</code></pre>]]></content>
      
      
      <categories>
          
          <category> frp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> frp </tag>
            
            <tag> 内网穿透 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
